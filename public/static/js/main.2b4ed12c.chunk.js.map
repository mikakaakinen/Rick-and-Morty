{"version":3,"sources":["helpers/helpers.js","components/CharacterItem.js","components/Notification.js","components/Characters.js","components/EpisodeInfo.js","components/Footer.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["showNotification","setter","setTimeout","CharacterItem","id","name","status","species","type","gender","origin","location","image","episode","created","console","log","firstfiveEpisodes","slice","Container","fluid","Row","Col","className","css","color","marginBottom","marginTop","textDecoration","Table","striped","hover","responsive","border","textAlign","fontSize","fontWeight","width","margin","dimension","format","date","marginLeft","map","index","to","key","src","alt","height","Notification","GET_CHARACTERS","gql","Characters","useState","count","setCount","React","setShowNotification","useQuery","variables","loading","error","data","characters","position","top","left","show","info","results","pages","Button","marginRight","onClick","variant","GET_EPISODE","EpisodeInfo","props","match","params","parseInt","search","episodesByIds","air_date","colspan","character","class","whiteSpace","overflow","textOverflow","Footer","fontFamily","maxWidth","backgroundColor","display","alignItems","justifyContent","Header","paddingTop","paddingBottom","client","ApolloClient","uri","cache","InMemoryCache","App","ApolloProvider","style","minHeight","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2b4ed12c.chunk.js","sourcesContent":["export function showNotification(setter) {\r\n    setter(true);\r\n    setTimeout(() => {\r\n        setter(false);\r\n    }, 2000);\r\n}\r\n","/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { jsx } from '@emotion/react';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Table from 'react-bootstrap/Table';\r\nimport Moment from 'react-moment';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function CharacterItem({\r\n    id,\r\n    name,\r\n    status,\r\n    species,\r\n    type,\r\n    gender,\r\n    origin,\r\n    location,\r\n    image,\r\n    episode,\r\n    created,\r\n}) {\r\n    console.log('Episode is', episode);\r\n    const firstfiveEpisodes = episode.slice(0, 5);\r\n    console.log('FirstEpisodes are', firstfiveEpisodes);\r\n    return (\r\n        <Container fluid>\r\n            <Row>\r\n                <Col className=\"text-center\">\r\n                    <h3\r\n                        css={{\r\n                            color: '#000',\r\n                            marginBottom: '2.5rem',\r\n                            marginTop: '2.5rem',\r\n                            textDecoration: 'underline',\r\n                        }}\r\n                    >\r\n                        {name}\r\n                    </h3>\r\n                </Col>\r\n                <Table\r\n                    striped\r\n                    hover\r\n                    responsive\r\n                    css={{\r\n                        border: '2px solid black',\r\n                        color: '#000',\r\n                        textAlign: 'center',\r\n                        fontSize: '1.3rem',\r\n                        fontWeight: '500',\r\n                        width: '75%',\r\n                        margin: '0 auto',\r\n                    }}\r\n                >\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>Id:</td>\r\n                            <td>{id}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Status:</td>\r\n                            <td>{status}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Species:</td>\r\n                            <td>{species}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Type:</td>\r\n                            <td>{type}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Gender:</td>\r\n                            <td>{gender}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Origin:</td>\r\n                            <td>{origin.name}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Location:</td>\r\n                            <td>\r\n                                <p>id: {location.id}</p>\r\n                                <p>name: {location.name}</p>\r\n                                <p>type: {location.type}</p>\r\n                                <p>dimension: {location.dimension}</p>\r\n                                <p>\r\n                                    created:\r\n                                    <Moment\r\n                                        format=\"YYYY-MM-DD HH:mm\"\r\n                                        date={location.created}\r\n                                        css={{\r\n                                            marginLeft: '0.5rem',\r\n                                        }}\r\n                                    />\r\n                                </p>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>First 5 Episodes:</td>\r\n                            <td>\r\n                                {firstfiveEpisodes.map((episode, index) => (\r\n                                    <Link to={'/episode/' + episode.id}>\r\n                                        <p key={index}>{episode.name}</p>\r\n                                    </Link>\r\n                                ))}\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Created:</td>\r\n                            <td>\r\n                                <Moment\r\n                                    format=\"YYYY-MM-DD HH:mm\"\r\n                                    date={created}\r\n                                    css={{\r\n                                        marginLeft: '0.5rem',\r\n                                    }}\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Image:</td>\r\n                            <td>\r\n                                <img\r\n                                    src={image}\r\n                                    alt=\"Rick and Morty\"\r\n                                    css={{\r\n                                        border: '1px solid #000',\r\n                                        width: '60%',\r\n                                        height: 'auto',\r\n                                    }}\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </Table>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\nconst Notification = ({ showNotification }) => {\r\n    return (\r\n        <div\r\n            className={`notification-container ${\r\n                showNotification ? 'show' : ''\r\n            }`}\r\n        >\r\n            <h5>No countries found</h5>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Notification;\r\n","/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { gql, useQuery } from '@apollo/client';\r\nimport { jsx } from '@emotion/react';\r\nimport React, { useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ReactLoading from 'react-loading';\r\nimport { showNotification as show } from '../helpers/helpers';\r\nimport CharacterItem from './CharacterItem';\r\nimport Notification from './Notification';\r\n\r\nconst GET_CHARACTERS = gql`\r\n    query Characters($count: Int! = 1) {\r\n        characters(page: $count) {\r\n            info {\r\n                count\r\n                pages\r\n                next\r\n                prev\r\n            }\r\n            results {\r\n                id\r\n                name\r\n                status\r\n                species\r\n                type\r\n                gender\r\n                origin {\r\n                    name\r\n                }\r\n                location {\r\n                    id\r\n                    name\r\n                    type\r\n                    dimension\r\n                    created\r\n                }\r\n                image\r\n                episode {\r\n                    id\r\n                    name\r\n                }\r\n                created\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nfunction Characters() {\r\n    const [count, setCount] = useState(1);\r\n    const [showNotification, setShowNotification] = React.useState(false);\r\n    const { loading, error, data } = useQuery(GET_CHARACTERS, {\r\n        variables: { count: count },\r\n    });\r\n    let characters = {};\r\n\r\n    if (loading)\r\n        return (\r\n            <ReactLoading\r\n                type={'spin'}\r\n                color={'blue'}\r\n                height={'100px'}\r\n                width={'100px'}\r\n                css={{\r\n                    position: 'fixed',\r\n                    top: '40%',\r\n                    left: '10%',\r\n                }}\r\n            />\r\n        );\r\n    if (error) return <Notification showNotification={showNotification} />;\r\n\r\n    if (data.characters) {\r\n        characters = data.characters;\r\n    } else {\r\n        show(setShowNotification);\r\n    }\r\n\r\n    const { info, results } = characters;\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Row>\r\n                <Row>\r\n                    <Col className=\"text-center\">\r\n                        <h5\r\n                            css={{\r\n                                color: '#000',\r\n                                marginBottom: '2.0rem',\r\n                                marginTop: '1.0rem',\r\n                            }}\r\n                        >\r\n                            Current page: {count}/{info.pages}\r\n                        </h5>\r\n                    </Col>\r\n                </Row>\r\n                <Col className=\"text-center\">\r\n                    <Button\r\n                        css={{\r\n                            marginRight: '1.5rem',\r\n                        }}\r\n                        onClick={() => {\r\n                            if (count > 1) setCount((count) => count - 1);\r\n                        }}\r\n                        variant=\"primary\"\r\n                    >\r\n                        Prev\r\n                    </Button>\r\n                    <Button\r\n                        onClick={() => {\r\n                            if (count < 34) setCount((count) => count + 1);\r\n                        }}\r\n                        variant=\"primary\"\r\n                    >\r\n                        Next\r\n                    </Button>\r\n                    {results.map(\r\n                        (\r\n                            {\r\n                                id,\r\n                                name,\r\n                                status,\r\n                                species,\r\n                                type,\r\n                                gender,\r\n                                origin,\r\n                                location,\r\n                                image,\r\n                                episode,\r\n                                created,\r\n                            },\r\n                            index\r\n                        ) => (\r\n                            <CharacterItem\r\n                                id={id}\r\n                                name={name}\r\n                                status={status}\r\n                                species={species}\r\n                                type={type}\r\n                                gender={gender}\r\n                                origin={origin}\r\n                                location={location}\r\n                                image={image}\r\n                                episode={episode}\r\n                                created={created}\r\n                            />\r\n                        )\r\n                    )}\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Characters;\r\n","/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { gql, useQuery } from '@apollo/client';\r\nimport { jsx } from '@emotion/react';\r\nimport React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Table from 'react-bootstrap/Table';\r\nimport ReactLoading from 'react-loading';\r\nimport Moment from 'react-moment';\r\nimport { Link } from 'react-router-dom';\r\nimport { showNotification as show } from '../helpers/helpers';\r\nimport Notification from './Notification';\r\n\r\nconst GET_EPISODE = gql`\r\n    query Episode($search: ID!) {\r\n        episodesByIds(ids: [$search]) {\r\n            id\r\n            name\r\n            air_date\r\n            characters {\r\n                name\r\n                image\r\n            }\r\n            created\r\n        }\r\n    }\r\n`;\r\n\r\nexport default function EpisodeInfo(props) {\r\n    let { id } = props.match.params;\r\n    id = parseInt(id);\r\n    const [showNotification, setShowNotification] = React.useState(false);\r\n    const { loading, error, data } = useQuery(GET_EPISODE, {\r\n        variables: { search: id },\r\n    });\r\n    let episode = [];\r\n    if (loading)\r\n        return (\r\n            <ReactLoading\r\n                type={'spin'}\r\n                color={'blue'}\r\n                height={'100px'}\r\n                width={'100px'}\r\n                css={{\r\n                    position: 'fixed',\r\n                    top: '40%',\r\n                    left: '10%',\r\n                }}\r\n            />\r\n        );\r\n    if (error) return <Notification showNotification={showNotification} />;\r\n    if (data.episodesByIds) {\r\n        episode = data.episodesByIds[0];\r\n    } else {\r\n        show(setShowNotification);\r\n    }\r\n\r\n    const { name, air_date, characters, created } = episode;\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Row>\r\n                <Col className=\"text-center\">\r\n                    <h3\r\n                        css={{\r\n                            color: '#000',\r\n                            marginBottom: '3.0rem',\r\n                            marginTop: '1.0rem',\r\n                            textDecoration: 'underline',\r\n                        }}\r\n                    >\r\n                        {name}\r\n                    </h3>\r\n                    <Table\r\n                        striped\r\n                        hover\r\n                        responsive\r\n                        css={{\r\n                            border: '2px solid black',\r\n                            color: '#000',\r\n                            textAlign: 'center',\r\n                            fontSize: '1.3rem',\r\n                            fontWeight: '500',\r\n                            width: '75%',\r\n                            margin: '0 auto 0.5rem',\r\n                        }}\r\n                    >\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>Id:</td>\r\n                                <td>{id}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Air Date:</td>\r\n                                <td>{air_date}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td colspan=\"2\">\r\n                                    <h4\r\n                                        css={{\r\n                                            color: '#000',\r\n                                            margin: '0.5rem auto 1.5rem',\r\n                                            textDecoration: 'underline',\r\n                                        }}\r\n                                    >\r\n                                        Characters\r\n                                    </h4>\r\n                                    {characters.map((character, index) => (\r\n                                        <div className=\"responsive\">\r\n                                            <div\r\n                                                key={index}\r\n                                                className=\"gallery\"\r\n                                            >\r\n                                                <img\r\n                                                    src={character.image}\r\n                                                    alt=\"Rick and Morty\"\r\n                                                />\r\n                                                <div class=\"desc\">\r\n                                                    <p\r\n                                                        css={{\r\n                                                            whiteSpace:\r\n                                                                'nowrap',\r\n                                                            overflow: 'hidden',\r\n                                                            textOverflow:\r\n                                                                'ellipsis',\r\n                                                        }}\r\n                                                    >\r\n                                                        {character.name}\r\n                                                    </p>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    ))}\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Created:</td>\r\n                                <td>\r\n                                    <Moment\r\n                                        format=\"YYYY-MM-DD HH:mm\"\r\n                                        date={created}\r\n                                        css={{\r\n                                            marginLeft: '0.5rem',\r\n                                        }}\r\n                                    />\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </Table>\r\n                </Col>\r\n            </Row>\r\n            <Link\r\n                to=\"/\"\r\n                css={{\r\n                    position: 'fixed',\r\n                    top: '30%',\r\n                    left: '10px',\r\n                }}\r\n            >\r\n                <Button variant=\"primary\"> Back</Button>\r\n            </Link>\r\n        </Container>\r\n    );\r\n}\r\n","/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { jsx } from '@emotion/react';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <header\r\n            css={{\r\n                fontFamily: 'Comfortaa',\r\n                textAlign: 'center',\r\n                height: '80px',\r\n                width: '100%',\r\n                maxWidth: '100%',\r\n                backgroundColor: '#1f3a93',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n            }}\r\n        >\r\n            <h4\r\n                css={{\r\n                    color: '#fff',\r\n                    whiteSpace: 'nowrap',\r\n                    overflow: 'hidden',\r\n                    textOverflow: 'ellipsis',\r\n                }}\r\n            >\r\n                Made with\r\n                <span\r\n                    css={{\r\n                        color: '#ff0000',\r\n                    }}\r\n                >\r\n                    {' '}\r\n                    &hearts;\r\n                </span>{' '}\r\n                in Riihim&auml;ki, Finland\r\n            </h4>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Footer;\r\n","/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { jsx } from '@emotion/react';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header\r\n            css={{\r\n                fontFamily: 'Comfortaa',\r\n                textAlign: 'center',\r\n                paddingTop: '20px',\r\n                paddingBottom: '10px',\r\n                marginBottom: '20px',\r\n                backgroundColor: '#1f3a93',\r\n                width: '100%',\r\n                maxWidth: '100%',\r\n            }}\r\n        >\r\n            <h1\r\n                css={{\r\n                    marginBottom: '5px',\r\n                    color: '#fff',\r\n                    whiteSpace: 'nowrap',\r\n                    overflow: 'hidden',\r\n                    textOverflow: 'ellipsis',\r\n                }}\r\n            >\r\n                RICK AND MORTY API APP\r\n            </h1>\r\n            <h2\r\n                css={{\r\n                    color: '#fff',\r\n                }}\r\n            >\r\n                Made with React and GraphQL\r\n            </h2>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport Characters from './components/Characters';\nimport EpisodeInfo from './components/EpisodeInfo';\nimport Footer from './components/Footer';\nimport Header from './components/Header';\n\nconst client = new ApolloClient({\n    uri: 'https://rickandmortyapi.com/graphql',\n    cache: new InMemoryCache(),\n});\n\nfunction App() {\n    return (\n        <ApolloProvider client={client}>\n            <Router>\n                <div\n                    style={{\n                        minHeight: 'calc(100vh - 80px)',\n                        backgroundColor: '#e8e8e8',\n                        paddingBottom: '35px',\n                    }}\n                >\n                    <Header />\n                    <Switch>\n                        <Route exact path=\"/\" component={Characters} />\n                        <Route\n                            exact\n                            path=\"/episode/:id\"\n                            component={EpisodeInfo}\n                        />\n                    </Switch>\n                </div>\n                <Footer />\n            </Router>\n        </ApolloProvider>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}